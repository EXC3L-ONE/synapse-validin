{
  "author": {
    "name": "EXC3L",
    "url": "https://github.com/EXC3L-ONE"
  },
  "build": {
    "time": 1750265910116
  },
  "commands": [
    {
      "cmdargs": [
        [
          "apikey",
          {
            "help": "The API Key",
            "type": "str"
          }
        ],
        [
          "--self",
          {
            "action": "store_true",
            "default": false,
            "help": "Set the key as a user variable. If not used, the key is set globally.",
            "type": "bool"
          }
        ],
        [
          "--debug",
          {
            "action": "store_true",
            "default": false,
            "help": "Show verbose debug output.",
            "type": "bool"
          }
        ]
      ],
      "descr": "Set the API key to use with validin (required)",
      "name": "ex.validin.setup.apikey",
      "perms": [
        [
          "ex",
          "validin",
          "user"
        ]
      ],
      "storm": "init {\n    $privsep = $lib.import(ex.validin.privsep, debug=$lib.debug)\n\n    if ($cmdopts.self) {\n        $lib.print(\"Setting Validin API key for the current user.\")\n    } else {\n        $lib.print(\"Setting Validin API key for all users.\")\n    }\n\n    $key_status_ok = $privsep.setValidinAPIKey($cmdopts.apikey, $cmdopts.self)\n\n    if ($key_status_ok) {\n        if ($lib.debug) {$lib.print(\"Validin API key set successfully\")}\n    } else {\n        $lib.warn(\"Failed setting the key for the Validin API. Check if the token you provided is valid.\")\n    }\n\n}"
    },
    {
      "cmdargs": [
        [
          "tagname",
          {
            "default": "rep.validin",
            "help": "The tag prefix to use.",
            "type": "str"
          }
        ]
      ],
      "descr": "Set the tag prefix used when recording validin tags. Defaults to `rep.validin`.",
      "name": "ex.validin.setup.tagprefix",
      "perms": [
        [
          "ex",
          "validin",
          "user"
        ]
      ],
      "storm": "init {\n    $privsep = $lib.import(ex.validin.privsep)\n\n    $privsep.setTagPrefix($cmdopts.tagname)\n    $lib.print(\"Changed the Validin tag prefix to #{p}\", p=$privsep.getTagPrefix())\n}"
    },
    {
      "cmdargs": [
        [
          "hostname",
          {
            "default": "api.validin.com",
            "help": "The domain hostname to use.",
            "type": "str"
          }
        ]
      ],
      "descr": "Set the API hostname used for making API requests. Defaults to `api.validin.com`",
      "name": "ex.validin.setup.apihostname",
      "perms": [
        [
          "ex",
          "validin",
          "user"
        ]
      ],
      "storm": "init {\n    $privsep = $lib.import(ex.validin.privsep, debug=$lib.debug)\n\n    $lib.print(\"Setting Validin API hostname for all users.\")\n\n\n    $hostname_status_ok = $privsep.setValidinAPIHostname($cmdopts.hostname)\n    if ($hostname_status_ok) {\n        if ($lib.debug) {$lib.print(\"Validin API hostname set successfully\")}\n    } \n\n}"
    },
    {
      "cmdargs": [
        [
          "--include-extra",
          {
            "action": "store_true",
            "default": false,
            "help": "Include extra DNS record types (MX, NS, TXT) at a cost of 1 extra API call per node. Only works for `inet:fqdn` nodes",
            "type": "bool"
          }
        ],
        [
          "--yield",
          {
            "action": "store_true",
            "default": false,
            "help": "Yield the newly created nodes rather than the input nodes.",
            "type": "bool"
          }
        ],
        [
          "--debug",
          {
            "action": "store_true",
            "default": false,
            "help": "Show verbose debug output.",
            "type": "bool"
          }
        ]
      ],
      "descr": "Fetches Passive DNS data for given `inet:ipv4` and `inet:fqdn` nodes.",
      "forms": {
        "inputs": [
          "inet:ipv4",
          "inet:fqdn"
        ]
      },
      "name": "ex.validin.pdns",
      "perms": [
        [
          "ex",
          "validin",
          "user"
        ]
      ],
      "storm": "init {\n    $api = $lib.import(ex.validin.api, debug=$lib.debug)\n    $privsep = $lib.import(ex.validin.privsep, debug=$lib.debug)\n}\n\n$api_key_set = $privsep.getValidinAPIKey()\n\nif ($api_key_set != $lib.false) {\n\n    switch $node.form() {\n        \"inet:ipv4\": { \n            $data = $api.getIpPDNS($node.repr()) \n            if ($data) {\n                divert $cmdopts.yield $privsep.parseIpPDNS($data)\n            }\n        }\n        \"inet:fqdn\": {\n            tee \n            {\n                $data = $api.getDomainPDNS($node.repr())\n                if ($data) {\n                    divert $cmdopts.yield $privsep.parseDomainPDNS($data)\n                }\n            }\n            // If the user requested extra DNS records, fetch them\n            // and yield them as well.\n            {            \n                if ($cmdopts.'include-extra') {\n                    $extra_dns = $api.getExtraDomainPDNS($node.repr())\n                    if ($extra_dns) {\n                        divert $cmdopts.yield $privsep.parseDomainPDNS($extra_dns)\n                    }\n                }\n            }\n        }\n        *: { if $lib.debug { $lib.warn(\"unsupported form received: {f}\", f=$node.form()) } }\n    }\n\n} else {\n    $lib.exit(\"Validin API key not set and is needed to use this function, please run 'ex.validin.setup.apikey' first\")\n}"
    },
    {
      "cmdargs": [
        [
          "--yield",
          {
            "action": "store_true",
            "default": false,
            "help": "Yield the newly created nodes rather than the input inet:fqdn nodes.",
            "type": "bool"
          }
        ],
        [
          "--debug",
          {
            "action": "store_true",
            "default": false,
            "help": "Show verbose debug output.",
            "type": "bool"
          }
        ]
      ],
      "descr": "Fetches subdomains for a given `inet:fqdn` node",
      "forms": {
        "inputs": [
          "inet:fqdn"
        ]
      },
      "name": "ex.validin.host.subdomains",
      "perms": [
        [
          "ex",
          "validin",
          "user"
        ]
      ],
      "storm": "init {\n    $api = $lib.import(ex.validin.api, debug=$lib.debug)\n    $privsep = $lib.import(ex.validin.privsep, debug=$lib.debug)\n}\n\n$api_key_set = $privsep.getValidinAPIKey()\n\nif ($api_key_set != $lib.false) {\n\n    switch $node.form() {\n        \"inet:fqdn\": {\n            $data = $api.getDomainSubdomains($node.repr())\n            if ($data) {\n                divert $cmdopts.yield $privsep.parseDomains($data)\n            }\n\n        }\n        *: { if $lib.debug { $lib.warn(\"unsupported form received: {f}\", f=$node.form()) } }\n    }\n\n} else {\n    $lib.exit(\"Validin API key not set and is needed to use this function, please run 'ex.validin.setup.apikey' first\")\n}"
    },
    {
      "cmdargs": [
        [
          "--yield",
          {
            "action": "store_true",
            "default": false,
            "help": "Yield the newly created nodes rather than the input nodes.",
            "type": "bool"
          }
        ],
        [
          "--debug",
          {
            "action": "store_true",
            "default": false,
            "help": "Show verbose debug output.",
            "type": "bool"
          }
        ]
      ],
      "descr": "Ingests all the host responses as `inet:http:request` nodes",
      "forms": {
        "inputs": [
          "inet:fqdn",
          "inet:ipv4"
        ]
      },
      "name": "ex.validin.host.responses",
      "perms": [
        [
          "ex",
          "validin",
          "user"
        ]
      ],
      "storm": "init {\n    $api = $lib.import(ex.validin.api, debug=$lib.debug)\n    $privsep = $lib.import(ex.validin.privsep, debug=$lib.debug)\n}\n\n$api_key_set = $privsep.getValidinAPIKey()\n\nif ($api_key_set != $lib.false) {\n\n    switch $node.form() {\n        \"inet:ipv4\": { \n            $data = $api.getIpCrawlHistory($node.repr()) \n            if ($data) {\n                divert $cmdopts.yield $privsep.parseCrawlResponse($data)\n            }\n        }\n        \"inet:fqdn\": {\n            $data = $api.getDomainCrawlHistory($node.repr())\n            if ($data) {\n                divert $cmdopts.yield $privsep.parseCrawlResponse($data)\n            }\n\n        }\n        *: { if $lib.debug { $lib.warn(\"unsupported form received: {f}\", f=$node.form()) } }\n    }\n\n} else {\n    $lib.exit(\"Validin API key not set and is needed to use this function, please run 'ex.validin.setup.apikey' first\")\n}"
    },
    {
      "cmdargs": [
        [
          "query",
          {
            "help": "The search query to run in Validin",
            "type": "str"
          }
        ],
        [
          "--debug",
          {
            "action": "store_true",
            "default": false,
            "help": "Show verbose debug output.",
            "type": "bool"
          }
        ]
      ],
      "descr": "Searches Validin dataset using the Advanced Search syntax",
      "name": "ex.validin.host.search",
      "perms": [
        [
          "ex",
          "validin",
          "user"
        ]
      ],
      "storm": "init {\n    $api = $lib.import(ex.validin.api, debug=$lib.debug)\n    $privsep = $lib.import(ex.validin.privsep, debug=$lib.debug)\n}\n\n$api_key_set = $privsep.getValidinAPIKey()\n\nif ($api_key_set != $lib.false) {\n\n    $search_results = $api.getAdvancedSearchResults($cmdopts.query)\n    if ($search_results) {\n        yield $privsep.parseCrawlResponse($search_results)\n        $privsep.createSearchQueryNode($node, $cmdopts.query)\n    }\n\n\n} else {\n    $lib.exit(\"Validin API key not set and is needed to use this function, please run 'ex.validin.setup.apikey' first\")\n}"
    }
  ],
  "desc": "The ex-validin package provides an interface to the Validin API allowing for enrichment of `inet:ipv4` and `inet:fqdn` nodes.",
  "modules": [
    {
      "name": "ex.validin.api",
      "storm": "$privsep = $lib.import(ex.validin.privsep, debug=$lib.debug)\n\n\nfunction getIpPDNS(entity) {\n    $api_url = $lib.str.concat(\"/axon/ip/dns/history/\", $entity)\n\n    if ($lib.debug) {\n        $lib.print(\"Calling API URL: {url}\", url=$api_url)\n    }\n\n    return($privsep.makeValidinAPIRequest($api_url))\n}\n\nfunction getDomainPDNS(entity) {\n    $api_url = $lib.str.concat(\"/axon/domain/dns/history/\", $entity)\n\n    if ($lib.debug) {\n        $lib.print(\"Calling API URL: {url}\", url=$api_url)\n    }\n    return($privsep.makeValidinAPIRequest($api_url))\n}\n\nfunction getExtraDomainPDNS(entity) {\n    $api_url = $lib.str.concat(\"/axon/domain/dns/extra/\", $entity)\n\n    if ($lib.debug) {\n        $lib.print(\"Calling API URL: {url}\", url=$api_url)\n    }\n    return($privsep.makeValidinAPIRequest($api_url))\n}\n\nfunction getDomainSubdomains(entity) {\n    $api_url = $lib.str.concat(\"/axon/domain/subdomains/\", $entity)\n\n    if ($lib.debug) {\n        $lib.print(\"Calling API URL: {url}\", url=$api_url)\n    }\n    return($privsep.makeValidinAPIRequest($api_url))\n}\n\nfunction getDomainCrawlHistory(entity) {\n    $api_url = $lib.str.concat(\"/axon/ip/crawl/history/\", $entity)\n\n    if ($lib.debug) {\n        $lib.print(\"Calling API URL: {url}\", url=$api_url)\n    }\n    return($privsep.makeValidinAPIRequest($api_url))\n}\n\nfunction getIpCrawlHistory(entity) {\n    $api_url = $lib.str.concat(\"/axon/ip/crawl/history/\", $entity)\n\n    if ($lib.debug) {\n        $lib.print(\"Calling API URL: {url}\", url=$api_url)\n    }\n    return($privsep.makeValidinAPIRequest($api_url))\n}\n\nfunction getAdvancedSearchResults(query) {\n    $api_url = $lib.str.concat(\"/axon/advanced/query?query_string=\", $lib.inet.http.urlencode($query))\n\n    if ($lib.debug) {\n        $lib.print(\"Calling API URL: {url}\", url=$api_url)\n    }\n    \n    return($privsep.makeValidinAPIRequest($api_url))\n}"
    },
    {
      "asroot:perms": [
        [
          "ex",
          "validin",
          "user"
        ]
      ],
      "name": "ex.validin.privsep",
      "storm": "function getMetaSource() {\n    [ meta:source=$lib.guid(\"validin\", \"ex\", \"powerup\") :name=\"validin\" ]\n    return($node)\n}\n\nfunction getValidinAPIKey() {\n    // see if the user has their own key set\n    $apikey = $lib.user.vars.get(\"validin:apikey\")\n    if ($apikey) {\n        return($apikey)\n    }\n\n    // no user key, check for global\n    $apikey = $lib.globals.get(\"validin:apikey\")\n    if ($apikey) {\n        return($apikey)\n    }\n \n    return($lib.false)\n}\n\nfunction setValidinExtendedProps() {\n\n    $validin_prop_list = ([])\n\n    $existing_props = $lib.model.ext.getExtModel().props\n    for $prop in $existing_props {\n        if ($prop.0 = 'inet:http:request') {\n            $validin_prop_list.append($prop.1)\n        }\n    }\n\n    if (not $validin_prop_list.has('_validin:body_hash')) {\n        $propinfo = ({'doc': 'The SHA1 hash of the body observed by Validin'})\n        $lib.model.ext.addFormProp(inet:http:request, _validin:body_hash, (hash:sha1, $({})), $propinfo)\n    } if (not $validin_prop_list.has('_validin:favicon_hash')) {\n        $propinfo = ({'doc': 'The MD5 hash of the favicon observed by Validin'})\n        $lib.model.ext.addFormProp(inet:http:request, _validin:favicon_hash, (hash:md5, ({})), $propinfo)\n    } if (not $validin_prop_list.has('_validin:class_0_hash')) {\n        $propinfo = ({'doc': 'The v0.0 version of the MD5 hash of the HTML classes observed by Validin'})\n        $lib.model.ext.addFormProp(inet:http:request, _validin:class_0_hash, (hash:md5, ({})), $propinfo)\n    } if (not $validin_prop_list.has('_validin:class_1_hash')) {\n        $propinfo = ({'doc': 'The v0.1 version of the MD5 hash of the HTML classes observed by Validin'})\n        $lib.model.ext.addFormProp(inet:http:request, _validin:class_1_hash, (hash:md5, ({})), $propinfo)\n    } if (not $validin_prop_list.has('_validin:banner_0_hash')) {\n        $propinfo = ({'doc': 'The v0.0 version of the MD5 hash of the banners observed by Validin'})\n        $lib.model.ext.addFormProp(inet:http:request, _validin:banner_0_hash, (hash:md5, ({})), $propinfo)\n    } if (not $validin_prop_list.has('_validin:title')) {\n        $propinfo = ({'doc': 'The title of the HTML site observed by Validin'})\n        $lib.model.ext.addFormProp(inet:http:request, _validin:title, (str, ({})), $propinfo)\n    }\n}\n\nfunction setValidinAPIKey(key, self) {\n    if ($self) {\n        $lib.user.vars.set(\"validin:apikey\", `Bearer {$key}`)\n    } else {\n        $lib.globals.set(\"validin:apikey\", `Bearer {$key}`)\n    }\n    return($checkValidinAPIKey())\n}\n\nfunction checkValidinAPIKey() {\n    $resp = $makeValidinAPIRequest(\"ping\")\n        \n    if ($resp.status = \"OK\") {\n        return($lib.true)\n    } else {\n        return($lib.false)\n    }\n}\n\nfunction getTagPrefix() {\n    return($lib.globals.get(\"ex.validin:tag-prefix\", default=rep.validin))\n}\n\nfunction setTagPrefix(prefix) {\n    ($ok, $norm) = $lib.trycast(syn:tag:part, $prefix)\n    if (not $ok) {\n        $lib.warn(\"failed to set tag prefix, invalid value: {s}\", s=$prefix)\n        return($lib.null)\n    }\n\n    $lib.globals.set(\"ex.validin:tag-prefix\", $prefix)\n}\n\nfunction setValidinAPIHostname(hostname) {\n    ($ok, $hostname_normalised) = $lib.trycast(inet:fqdn, $hostname)\n    if ($ok) {\n        $lib.globals.set(\"validin:api-hostname\", $hostname)\n        return($lib.true)\n    } else {\n        $lib.warn(\"Failed to set Validin API hostname, couldn't normalise value to a domain: {s}\", s=$hostname)\n        return($lib.false)\n    }\n    \n}\n\nfunction makeValidinAPIRequest(api_endpoint) {\n    $api_hostname = $lib.globals.get(\"validin:api-hostname\", default=\"api.validin.com\")\n    $url = `https://{$api_hostname}/api/{$api_endpoint}`\n\n    $resp = $lib.inet.http.get($url, headers=({\"Authorization\": $getValidinAPIKey()}))\n\n    if ($resp.code != 200) { \n        $lib.warn(\"Validin API request failed with code {c}\", c=$resp.code)\n        return($lib.null) \n    }\n\n    $json = $resp.body.json()\n\n    return($json)\n}\n\nfunction parseDomains(data) {\n\n    $srcnode = $getMetaSource()\n\n    for $domain in $data.domains {\n        [inet:fqdn=$domain.fqdn]\n    }\n    | uniq |\n    [<(seen)+ { yield $srcnode }]\n\n}\n\nfunction parseCrawlResponse(data) {\n\n    $srcnode = $getMetaSource()\n\n    for $crawl in $data.records.crawlr {\n        if (not $crawl.value.error) {\n\n            $banners = ([])\n            for $banner in $crawl.value.banner_full { if ($banner ~=\": \") { $banners.append($banner.split(\": \")) }}\n\n            if ($crawl.value.location) { $url = $crawl.value.location }\n            elif ($crawl.value.host and $crawl.value.port and $crawl.value.port != 80 and $crawl.value.port != 443) { $url = `{$crawl.value.scheme}://{$crawl.value.host}:{$crawl.value.port}` } \n            elif ($crawl.value.host) { $url = `{$crawl.value.scheme}://{$crawl.value.host}` }\n            elif ($crawl.value.ip and $crawl.value.port and $crawl.value.port != 80 and $crawl.value.port != 443 ) { $url = `{$crawl.value.scheme}://{$crawl.value.ip}:{$crawl.value.port}` }\n            else { $url = `{$crawl.value.scheme}://{$crawl.value.ip}` }\n\n            [(inet:http:request=(\"validin\", $crawl.key, $crawl.first_seen, $crawl.last_seen)\n                :url=$url\n                :time=$lib.time.fromunix($crawl.first_seen)\n                :server=`tcp://{$crawl.value.ip}:{$crawl.value.port}`\n                :response:headers=$banners\n                :response:code?=$lib.regex.search(\" (\\d{3}) \", $crawl.value.start_line).0\n                :_validin:body_hash?=$crawl.value.body_hash\n                :_validin:favicon_hash?=$crawl.value.favicon_hash\n                :_validin:class_0_hash?=$crawl.value.class_0_hash\n                :_validin:class_1_hash?=$crawl.value.class_1_hash\n                :_validin:banner_0_hash?=$crawl.value.banner_0_hash\n                :flow={[inet:flow=(\"validin\", $crawl.key, $crawl.first_seen, $crawl.last_seen, $crawl.value.port, $crawl.value.scheme)\n                    :dst=`tcp://{$crawl.value.ip}:{$crawl.value.port}`\n                    :dst:handshake=$crawl.value.banner\n                    :dst:txbytes=$crawl.value.length\n                    :time=$lib.time.fromunix($crawl.first_seen)\n                    :dst:ssl:cert?={[crypto:x509:cert=$lib.gen.cryptoX509CertBySha256($crawl.value.cert_fingerprint_sha256) \n                                        :validity:notafter*unset=$crawl.value.cert.not_after\n                                        :validity:notbefore*unset=$crawl.value.cert.not_before\n                                        :issuer=$crawl.value.cert.issuer.replace(\"/\", \" \")\n                    ]}\n                ]}\n            )]\n\n            for $anchor in $crawl.value.ext_links.anchors {\n                [+(_validin:anchor)> {[inet:fqdn=$anchor]}]\n            }\n        }\n\n        if ($crawl.value.cert_details.jarm) {\n            { [(inet:ssl:jarmsample=(`tcp://{$crawl.value.ip}:{$crawl.value.port}`, $crawl.value.cert_details.jarm) .seen=($crawl.first_seen, $crawl.last_seen) )] }\n        }\n\n    }\n    | uniq |\n    [<(seen)+ { yield $srcnode }]\n\n}\n\nfunction createSearchQueryNode(inboundNode, query) {\n    \n    yield $inboundNode\n\n    [<(found)+ {[it:exec:query=(\"validin\", $lib.time.now(), $query)\n                    :text=$query\n                    :time=$lib.time.now()\n                    :language=validin\n                    :synuser=$lib.user.iden\n                    :apiurl=`https://{$lib.globals.get(\"validin:api-hostname\", default=\"api.validin.com\")}/api/axon/advanced/query`\n                ]}\n    ]\n    \n}\n\nfunction parseDomainPDNS(data) {\n\n    $srcnode = $getMetaSource()\n\n    tee {\n        for $dns_a in $data.records.A {\n            $first = $lib.time.fromunix($dns_a.first_seen)\n            $last  = $lib.time.fromunix($dns_a.last_seen)\n            [ inet:dns:a=(\n                { [ inet:fqdn=$dns_a.key   .seen=($first,$last) ] },\n                { [ inet:ipv4=$dns_a.value .seen=($first,$last) ] }\n            ) .seen=($first,$last) ]\n        }\n\n        for $dns_ns in $data.records.NS {\n            $first = $lib.time.fromunix($dns_ns.first_seen)\n            $last  = $lib.time.fromunix($dns_ns.last_seen)\n            [ inet:dns:ns=(\n                { [ inet:fqdn=$dns_ns.key   .seen=($first,$last) ] },\n                { [ inet:fqdn=$dns_ns.value .seen=($first,$last) ] }\n            ) .seen=($first,$last) ]\n        }\n\n        for $dns_aaaa in $data.records.AAAA {\n            $first = $lib.time.fromunix($dns_aaaa.first_seen)\n            $last  = $lib.time.fromunix($dns_aaaa.last_seen)\n            [ inet:dns:aaaa=(\n                { [ inet:fqdn=$dns_aaaa.key   .seen=($first,$last) ] },\n                { [ inet:ipv6=$dns_aaaa.value .seen=($first,$last) ] }\n            ) .seen=($first,$last) ]\n        }\n\n        for $dns_mx in $data.records.MX {\n            $first = $lib.time.fromunix($dns_mx.first_seen)\n            $last  = $lib.time.fromunix($dns_mx.last_seen)\n            [ inet:dns:mx=(\n                { [ inet:fqdn=$dns_mx.key   .seen=($first,$last) ] },\n                { [ inet:fqdn=$dns_mx.value .seen=($first,$last) ] }\n            ) .seen=($first,$last) ]\n        }\n\n        for $dns_txt in $data.records.TXT {\n            $first = $lib.time.fromunix($dns_txt.first_seen)\n            $last  = $lib.time.fromunix($dns_txt.last_seen)\n            [ inet:dns:txt=(\n                { [ inet:fqdn=$dns_txt.key .seen=($first,$last) ] },\n                $dns_txt.value\n            ) .seen=($first,$last) ]\n        }\n    }\n\n    | uniq |\n    [<(seen)+ { yield $srcnode }]\n\n}\n\nfunction parseIpPDNS(data) {\n\n    $srcnode = $getMetaSource()\n\n    for $dns_a in $data.records.A {\n        $first = $lib.time.fromunix($dns_a.first_seen)\n        $last = $lib.time.fromunix($dns_a.last_seen)\n        [ inet:dns:a=(\n            { [ inet:fqdn=$dns_a.value .seen=($first, $last) ] },\n            { [ inet:ipv4=$dns_a.key .seen=($first, $last) ] }\n        ) .seen=($first, $last) ]\n    }\n\n    [<(seen)+ { yield $srcnode }]\n    | uniq\n\n}"
    }
  ],
  "name": "ex-validin",
  "onload": "$lib.import(ex.validin.privsep).setValidinExtendedProps()",
  "optic": {
    "actions": [
      {
        "descr": "Get passive DNS information from Validin",
        "forms": [
          "inet:fqdn",
          "inet:ipv4"
        ],
        "name": "pdns (A & AAAA only)",
        "storm": "ex.validin.pdns"
      },
      {
        "descr": "Get passive DNS information from Validin",
        "forms": [
          "inet:fqdn",
          "inet:ipv4"
        ],
        "name": "pdns (all types)",
        "storm": "ex.validin.pdns --include-extra"
      },
      {
        "descr": "Get host responses from Validin",
        "forms": [
          "inet:fqdn",
          "inet:ipv4"
        ],
        "name": "host responses",
        "storm": "ex.validin.host.responses"
      },
      {
        "descr": "Get subdomains from Validin",
        "forms": [
          "inet:fqdn"
        ],
        "name": "host subdomains",
        "storm": "ex.validin.host.subdomains"
      }
    ]
  },
  "perms": [
    {
      "default": false,
      "desc": "Allows a user to leverage the ex-validin package",
      "gate": "cortex",
      "perm": [
        "ex",
        "validin",
        "user"
      ]
    }
  ],
  "synapse_minversion": [
    2,
    140,
    0
  ],
  "version": "1.1.0"
}